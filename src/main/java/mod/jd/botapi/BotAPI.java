/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

package mod.jd.botapi;

import mod.jd.botapi.Bot.AI.Nodes.Actions.Action;
import mod.jd.botapi.Bot.AI.Nodes.BotAPIAlgorithmNode;
import mod.jd.botapi.Bot.Body.Body;
import mod.jd.botapi.Bot.Body.BotAPIBody;
import mod.jd.botapi.Bot.Body.EntityBody;
import mod.jd.botapi.Bot.Body.PlayerBody;
import mod.jd.botapi.Bot.Bot;
import net.minecraftforge.client.ClientCommandHandler;
import net.minecraftforge.fml.common.DummyModContainer;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.common.Mod.EventHandler;
import net.minecraftforge.fml.common.ModMetadata;
import net.minecraftforge.fml.common.discovery.ASMDataTable;
import net.minecraftforge.fml.common.event.FMLInitializationEvent;
import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;

import java.util.Set;

/**
 *  This is the main class.
 *  This is the main mod class. o_o
 *
 *  The {@link Mod} annotation specifies the Mod's unique ID, it's version and the versions of Minecraft it runs on.
 *  It also specifies that this class is the main Mod Class.
 *  This is also the Mod's Container class. O_O
 *
 *  Currently it runs on all versions equal to and above v1.11.2
 *  @see Mod
 *  @see DummyModContainer
 * */
@Mod(modid = BotAPI.MODID, version = BotAPI.VERSION, clientSideOnly = true, acceptedMinecraftVersions = "[1.11.2,)", canBeDeactivated = true)
public class BotAPI extends DummyModContainer
{

    public PlayerMovementController pmc;

    // The static data about the mod.
    public static final String MODID = "botapi";
    public static final String VERSION = "1.0";

    // The globally used object of the mod.
    public static BotAPI INSTANCE = new BotAPI();

    /**
     * Returns the global and static Mod Instance to be used.
     * Should always be used to get an object of the mod, instead of creating a new object.
     * @see Mod.InstanceFactory
     * @return shopGen.INSTANCE
     */
    @Mod.InstanceFactory
    public static BotAPI getInstance()
    {
        return INSTANCE;
    }


    /**
     * This is the constructor of the Mod Object.
     * It sets the Mod's Metadata.
     * @see ModMetadata
     */
    public BotAPI()
    {
        super(new ModMetadata());
        ModMetadata md = getMetadata();
        md.autogenerated = false;
        md.version = VERSION;
        md.modId = MODID;
        md.authorList.add("Jaideep Singh Heer");
        md.description = "A Mod create and control bots for automation.";
        md.credits = "Made by the Jaideep Singh Heer.";
        md.name = "BotAPI Mod";
    }

    /**
     * This is the preInit function. It gets the annotation data from fml and registers all the annotated Bodies.
     * @see mod.jd.botapi.Bot.Body.BotAPIBody
     * @see FMLPreInitializationEvent#getAsmData()
     */
    @EventHandler
    public void preInit(FMLPreInitializationEvent event)
    {
        // Get list of all classes with BotAPIBody annotation.
        Set<ASMDataTable.ASMData> s = event.getAsmData().getAll(BotAPIBody.class.getName());
        for (ASMDataTable.ASMData asmdata:s)
        {
            try {
                // Get class from its name.
                Class c = Class.forName(asmdata.getClassName());
                // Register it if it really extends Body.
                if(Body.class.isAssignableFrom(c))
                    Bot.registerBody(c);
            }
            catch (ClassNotFoundException e) {
                e.printStackTrace();
            }
        }

        // Get list of all classes with BotAPIAlgorithmNode annotation.
        s = event.getAsmData().getAll(BotAPIAlgorithmNode.class.getName());
        for (ASMDataTable.ASMData asmdata:s)
        {
            try{
                // Get class from its name.
                Class c = Class.forName(asmdata.getClassName());
                // Register it if it really extends Body.
                if(Action.class.isAssignableFrom(c))
                    Bot.registerAction(c,(String)(asmdata.getAnnotationInfo().get("modid")),(String)(asmdata.getAnnotationInfo().get("NodeMetaDataObjectName")));
            }
            catch (ClassNotFoundException e)
            {
                e.printStackTrace();
            }
        }
    }

    /**
     * It is the init function which initialises the mod.
     * This function is called by Forge during the Mod Initialisation Phase.
     * @see EventHandler
     * @param event
     */
    @EventHandler
    public void init(FMLInitializationEvent event)
    {
        System.out.println("Initialising BotAPI");
        registerCommands();
        registerBodies();
        pmc = new PlayerMovementController();
    }

    /**
     * Registers all the Bodies, introduced by this Mod, to Bot class for automatic Body selection.
     */
    private void registerBodies()
    {
        Bot.registerBody(PlayerBody.class);
    }

    private void registerCommands() {
        ClientCommandHandler.instance.registerCommand(new mod.jd.botapi.Commands.botCommand());
        ClientCommandHandler.instance.registerCommand(new mod.jd.botapi.Commands.testCommand());
    }

}
